
create an ec2 instance and attach an elastic ip to it.

terraform {
  required_version = "~> 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = "us-east-2"
}

resource "aws_instance" "test_ec2" {
  ami           = "ami-02bf8ce06a8ed6092"
  instance_type = "t2.micro"
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = "Demo-ec2"
  }
}

resource "aws_eip" "my_eip" {
  instance = aws_instance.test_ec2.id
}

variable "boolean" {        #if y don't pass a default, it prompt user for an input on d cli.
  type = bool
  #default = true
}


The code will be be refactory -REFACTORING UR FILE ie creates files for varibles, output, etc seperately.

terraform {
  required_version = "~> 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.us_region
}

resource "aws_instance" "test_ec2" {
  ami           = var.my_ami
  instance_type = var.my_instance_type
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name
  }
}

resource "aws_eip" "my_eip" {
  instance = aws_instance.test_ec2.id
}
#u can use any variable name as under.
#using variablesus
variable "us_region" {
  type    = string
  default = "us-east-2"
}
variable "my_instance_type" {
  type    = string
  default = "t2-micro"
}
variable "my_ami" {
  type    = string
  default = "ami-02bf8ce06a8ed6092"
}

variable "my_instance_name" {
  type    = string
  default = "Demo-ec2"
}

# using variables means i am not hard coding info.
#for good organization it is good to refactory the code ie u can create variables files. provider
file etc in d wking dir - in this case settings.

Next is making d var. reqd.
1) make region to be reqd. don't supply d default value. for now comment it out - go to var file and
comment #default = "us-east-2", it means my region will be supplied by d user.
similarly if i want my instant type reqd, then comment #default = "t2_micro" in d var file.

LIST 
if i have many instance then type bcomes a list of strings  ie

variable "my_instance_type"
  type = list(string)
  default = ["t2.micro", "t2.medium", "t3.micro"] 

I have this instance as a list.
so if i want to provision t2.medium, what will be my index, i have to reference it in d rsource file as
follows
esource "aws_instance" "test_ec2" {
  ami           = var.my_ami
  instance_type = var.my_instance_type[1]    #index1 = index position 1 - provision t2-medium instance
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name
  }

when u run d code, it will create a t2-medium, it will pick it from d list of strings of d instances 
types.
d resource file and variable file will look like this
00000
#EC2Binstance configurations
resource "aws_instance" "test_ec2" {
  ami           = var.my_ami
  instance_type = var.my_instance_type[1]
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name

0000

variable "us_region" {
  type    = string
  default = "us-east-2"
}
/*
variable "my_instance_type" {
  type    = string
  default = "t2-micro"
}
*/

ariable "my_instance_type" {
  type    = list(string)
  default = ["t2-micro", "t2-medium", "t3-micro"]
}

variable "my_ami" {
  type    = string
  default = "ami-02bf8ce06a8ed6092"
}

variable "my_instance_name" {
  type    = string
  default = "Demo-ec2"
}
0000


NEXT PASS INTANCE AS A MAP
type will be a map
Default in map sld be in curly braces bcos map are key value pairs
lets say we have diff e't:
dev we want to provision t2-micro
staging t2-medium
prod t2-large

how do we reference our resources
in my resource file i will pass d key, not d index.
dev, staging, prod is  d key. this is how d resource and var file look like
below i want to creat a t2.micro instance type in my dev e't. same applies to others.

0000
#EC2Binstance configurations
resource "aws_instance" "test_ec2" {
  ami           = var.my_ami
  instance_type = var.my_instance_type["dev"]
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name
  }
}
#EIP configurations
resource "aws_eip" "my_eip" {
  instance = aws_instance.test_ec2.id
}



0000
variable "us_region" {
  type    = string
  default = "us-east-2"
}
/*
variable "my_instance_type" {
  type    = string
  default = "t2.micro"
}

ariable "my_instance_type" {
  type    = list(string)
  default = ["t2.micro", "t2.medium", "t3.micro"]
}
*/
variable "my_instance_type" {
  type = map(any)
  default = {
    dev     = "t2.micro"
    staging = "t2.medium"
    prod    = "t3.micro"
  }
}

variable "my_ami" {
  type    = string
  default = "ami-02bf8ce06a8ed6092"
}

variable "my_instance_name" {
  type    = string
  default = "Demo-ec2"
}

we have seen how we can use variables
to make our code reusable
by passing them as a string
by mking them reqd
by supplying default values
for maps
for list of strings
and how we can call those var. in our e't.

Tags can be passed as list or maps, then we can use same configuration to call them.

XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX
NEXT LOOK AT DATA SOURCES TO SEE FOR EXAMPLE HOW D DATA SOURCE CAN DYNAMICALLY GET D AMI ID 
FOR US INSTEAD OF GOING TO MANUALLY COPY IT AS U LAUNCH AN INSTANCE IN AWS.

1) how can we pass these var. as files: tfvars or auto-tfvars file
For all files which match terraform.tfvars or *.auto.tfvars present in the current directory, 
Terraform automatically loads them to populate variables.
read
05 - Variables and Data Sources/a) Variables/b). variable-files.md.
(if u want ur file to be automatically loaded by terra, pass it like this
terraform.tfvars or *.auto.tfvars 
if u want to run it on a command line u give it anyname but must end with: -var-file flag.
lets create terraform.tfvars in our dir. d variables that we have def earlier will be 
passed as a file in  terraform.tfvars - lets go practical

dev.ftvars file
us_region        = "us-east-1"
my_instance_name = "dev-ec2"
#i want d name of instance type to be dev-ec2.
# i can create a another file for my prod eviroment prod.tfvars.

prod.tfvars file
us_region = "us-east-1"
my_instance_name = "prod-ec2"

#suppose we saved this in a non terraform file prod.ftvar.md
us_region = "us-east-1"

my_instance_name = "prod-ec2"


#since this is not a .tfvars file, i will have to run it with -var-file=prod.tfvars.
#eg terraform plan -var-file=prod.tfvars means i want to run a plan based on my prod variables.a
#terraform is going to read from my variable file in prod (prod.tfvars), and it will populate my prod with d file i 
#i supplied - prod.tfvars
#this is how u can pass variable file on a command line.
#so we are using d same code or file to provision in diff e't. thus using the same file i can deploy to 
#multiple e't- here i am using d var file. either we give default or make var required.
#this concept is called dry = don't repeat urself.
#(we use var files, we write d same code, we make sure that anything we can pass as a var. we use var files so
#as not to repeat ourselves. all we are changing is just values in our var file like in dev.tfvars.
d
d name of d file can also be like dev.auto.tfvars. with d word auto, it means d file will be automatically loaded.u don't 
need to pass it on d command line  -var-file=prod.tfvars

XXXXXXXXXXXXXXXXXXXXXXX
DATA SOURCES
data source in terra can go and get info for you instead of u going to manually get d info.
eg lets get d data from an ubuntu ami
lets start by creating a file called say data.tf in our dir (settings)

dir data under settings
data.tf
cd settings and  data   to run it.

#key word to start with is data
data "aws_ami" "ubuntu_ami" { #i want to get data for ami
  most_recent = true   #i want to get the most recent ami.
  owners = ["099720109477"] #ami account id of the owner. check in aws(amazone machine image).

  filters {
    name   = "name"            #ami name
    values = ["ubuntu/images/hvm-ssd-gp3/ubuntu-noble-24.04-amd64-server-*"] #i am filtering by d name and iwant amazon to return all d dates.
  }
    filters {
      name   = "virtualization_type" #ami virtualization type
      values = ["hvm"]
    }
      filters {
        name   = "Architecture"
        values = ["x86_64"]
      }  

     filters {
        name   = "Root-device-type"
        values = ["ebs"]   
     }      
}
#this data will go to aws and look at d ami with this name, architecture, virtualization and root-device-type,
then return d most recent.

lets put this data source in its own dir and see if it is going to fetch our ami.

terraform plan will fetch the ami id as expected
data.aws_ami.ubuntu_ami: Read complete after 0s [id=ami-09040d770ffe2224f]
ami id copied from aws  - AMI ID: ami-09040d770ffe2224f    u see its d same.
now that it has pulled d ami dynamically how then can we use it inour code.
first copy the data.tf from data dir created above to the dir where all our files are ie settings
ls to see data.tf in settings dir.

i can read this ami using thid data source. so how do i reference this data source.
i will reference it in d resource

with this data source for my region, i can provision this instance by it going to fetch d data for me.
once it fetch d data, it injects it in there as an ami.

#terraform plan. it reads d data, find d ami id and injects it into the ami as a value.
#terra will now use it to create our ami.
#suppose i change d region in d var. file. if i run terraform plan, it will still find the ami id in that region
and inject it into the ami as a value. terra will now use it to create our ami in that region.
d data source just go to the region passed and return d id.
this id attribute is actually replaced in ami = data.aws_ami.ubuntu_ami.id ***replaced here.
with this i can dynamically provision my infrastructure withourt going to aws to get the ami.
so we are using data sources to go into aws get thhe info, and inject it into our code dynamically.

if i want to get d id of a vpc that exist, u can use the data source instead of going to d counsel.

u can get doc. from d registry of terraform.
eg to create say a ec2 instance, look under d resource section.
we  also have data sources section. eg look for ami as a data source (aws_ami under data section)- u will see
basic saamples on how to use it. things that we did above.

Below is how d resource.tf file is configured to achieve data sources.

#EC2Binstance configurations
resource "aws_instance" "test_ec2" {
  ami           = data.aws_ami.ubuntu_ami.id
  instance_type = var.my_instance_type["dev"]
  #user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name
  }
}
#EIP configurations
resource "aws_eip" "my_eip" {
  instance = aws_instance.test_ec2.id
}


#i am not supplying any variables, it is going to use d default

I know longer need this variable under in my variable.tf bcos i have a data source
w will do that job of fetching d ami id for me in ahy region

this data source is for ubuntu, i can create a data source for my amazon linux, my redhat etc., 
goto d git hub, there are some data sources in 
05 - Variables and Data Sources/b) Data sources/1. manifests prof have samples for redhat, ubuntu and 
amazonelinux - ie how to build d data source.

//////
do an assignment on redhat and amazonlinux. build their data sources.
when its done, replace it in 2 example-datasource with amazonelinux try to provision d resource.
do also for redhat 
///////

Note if u created it urself, then use self.

variable "my_ami" {
  type    = string
  default = "ami-02bf8ce06a8ed6092"
}


MORE ON DATA SOURCES




