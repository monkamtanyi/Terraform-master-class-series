Building codes using variables. the main file was 
was devided into 3 files. this is refactoring.
ie The primary goal of refactoring is to improve the nonfunctional
attributes of the software. This process can involve cleaning up
and organizing the code, making it easier to understand, maintain, 
and extend in the future
involves the use of various techniques and practices, such as:

Renaming Variables and Methods: Giving meaningful names that convey 
the purpose or functionality.
Overall, refactoring is an essential practice in software development
aimed at keeping the codebase healthy and adaptable.


resource.tf   

/*
# ec2-instance configuration

resource "aws_instance" "test_ec2" {
  ami           = var.myami
  instance_type = var.myinstancetype [1]
  user_data     = file("${path.module}/httpd.sh") #file fn
  above is when d instance is a list, below is configuration when it is a map
  below we want d instnace to be provisioned in d dev e't w is t2.micro.
  dev is d key and t2.micro is d value.
*/
resource "aws_instance" "test_ec2" {
  ami           = var.myami
  instance_type = var.myinstancetype["dev"]
  user_data     = file("${path.module}/httpd.sh")

  tags = {
    Name = var.my_instance_name
  }
}

#EIF cconfiguration

resource "aws_eip" "my_eip" {
  instance = aws_instance.test_ec2.id
}


/*
we have passed variables as a key value
ie string, map, and also as a list , default,
and as required variable.


variable "ami" {
  type    = string
  default = "ami-04b70fa74e45c3917"
}

variable "instanceType" {
  type    = string
  default = "t2.micro"
}

variable "name" {
  type    = string
  default = "firstec2"
}

variable "et" {
  type    = string
  default = "prod"
}

output "public_ip" {
  value = aws_instance.FirstEC2.public_ip
}
*/

provider.tf

terraform {
  required_version = "~> 1.0"
  required_providers {
    aws = {
      source  = "hashicorp/aws"
      version = "~> 5.0"
    }
  }
}

provider "aws" {
  region = var.myregion
}


variable "myregion" {
  type = string
  #default = "ca-central-1"
}


variable "myami" {
  type    = string
  default = "ami-0654ca17e4d49cdb4"
}
/*
variable "myinstancetype" {
  type    = list(string)
  default = ["t2.micro" , "t2.medium" , "t3.micro"]  

}

above instance is passed as a list. lets pass it as a map below.
how do we call d variable. goto resources.tf
*/



variable "myinstancetype" {
  type = map(any)
  default = {
    dev     = "t2.micro"
    staging = "t3.micro"
    prod    = "t2.medium"
  }
}


 variable.tf

variable "my_instance_name" {
  type    = string
  default = "Demo-ec2"
}

/*
lets make say the region to be an input.
you make a variable required by commenting it out ie by not 
supplying the default value. so the region is now 
supplied by the user.

Suppose instance type was is list. put the instances 
in the [] brackets. as above.
*/






















